## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry and imagePullSecrets
##
# global:
#   imageRegistry: myRegistryName
#   imagePullSecrets:
#     - myRegistryKeySecretName

cloud:
  # supported: amazon, azure, google
  provider:
  # zones:
  #   - us-east-2a
  #   - us-east-2b
  #   - us-east-2c

busybox:
  image:
    registry: docker.io
    repository: busybox
    tag: latest
    pullPolicy: Always
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
    ##
    # pullSecrets:
    # - myRegistryKeySecretName
    ## Specify a imagePullPolicy
    ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##

nuodb:
  image:
    registry: docker.io
    repository: nuodb/nuodb-ce
    tag: latest
    pullPolicy: Always
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
    ##
    # pullSecrets:
    # - myRegistryKeySecretName
    ## Specify a imagePullPolicy
    ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##

admin:
  # domain is the name of the NuoDB administration domain (e.g. the cluster name)
  domain: nuodb
  # namespace: nuodb
  # tlsCACert:
  #   secret: nuodb-ca-cert
  #   key: ca.cert
  # tlsKeyStore:
  #   secret: nuodb-server-keystore
  #   key: server.p12
  #   password: changeIt
  # tlsClientPEM:
  #   secret: nuodb-client-pem
  #   key: client.pem

## backup settings
# any value here *MUST* match the same value for the backup chart.
# all time values are in seconds unless the unit is part of the name.
backup:
  persistence:
    size: 20Gi
    accessModes:
      - ReadWriteOnce
    # storageClass: "-"
    
  timeout: 1800
  backupDir: /var/opt/nuodb/backup

  coldStorage:
    credentials: ""


database:
  ## Provide a name in place of prometheus-operator for `app:` labels
  ##
  #nameOverride: ""

  ## Provide a name to substitute for the full names of resources
  ##
  #fullnameOverride: ""

  # name
  # NuoDB Database name.  must consist of lowercase alphanumeric
  #characters '[a-z0-9]+'
  name: demo

  # rootUser
  # Name of Database user
  rootUser: dba

  # rootPassword
  # Database password
  rootPassword: secret

  # Typically set to runAsUser and/or fsGroup to 0 or 1000.
  # Add container capabilities such as NET_ADMIN. Ex: capabilities: [ "NET_ADMIN" ]
  securityContext:
    capabilities: []
    enabled: false
    runAsUser: 1000
    fsGroup: 1000

  ## Import Environment Variables from one or more configMaps
  # Ex: from: [ configMapRef: { name: myConfigMap }, configMapRef: { name: myOtherConfigMap } ]
  ##
  envFrom: []

  persistence:
    size: 20Gi
    accessModes:
      - ReadWriteOnce
    # storageClass: "-"

  ## database-wide options.
  # These are applied using the --database-options on the startup command
  # change these to values appropriate for this database
  # these options are applied to all processes in the database.
  options:
    ping-timeout: 60
    max-lost-archives: 0

  # ensure all values here are strings - so quote any purely numeric values
  import:
    url: ""
    credentials: ""
    stripLevels: "1"

  sm:
    # Number of storage manager (SM) nodes with hotcopy enabled.  Limit is 1 in CE version of NuoDB
    # These SMs have hotcopy enabled, to start SMs without hotcopy use
    # database.sm.noHotCopy.replicas
    hotCopy:
      enablePod: true
      replicas: 1

      ## settings for the jornal backup
      # All time values are in seconds unless the unit is included in the name.
      journalBackup:
        enabled: false
        intervalMinutes: 15
        deadline: 90
        timeout: 950
        successHistory: 5
        failureHistory: 5

    # Number of storage manager (SM) nodes.  Limit is 1 in CE version of NuoDB
    # These SMs do not have hotcopy enabled, to start SMs with hotcopy use
    # database.sm.HotCopy.replicas
    noHotCopy:
      enablePod: true
      replicas: 0

    # NuoDB mem option - target maximum memory to be used by the cache
    memoryOption: 8g

    ## resources
    # k8s resouce min (request) and max (limit)
    resources:
      limits:
        cpu: 8
        memory: 16Gi
      requests:
        cpu: 4
        memory: 8Gi

    ## Affinity, selector, and tolerations
    # There are expanded as YAML, and can include variable and template references
    affinity: {}
    # nodeSelector: {}
    # tolerations: []
    
    ## labels
    # Additional Labels given to the SMs started
    labels: {}

    # additional options to pass to the starting NuoDB process.
    engineOptions: {}

    # named key/value pairs that need to be passed to the image, such as
    # keystore: "/etc/nuodb/keys/nuoadmin.p12"
    otherOptions: {}

    # Additional Options for DaemonSets
    # affinityNoHotCopyDS: {}
    # affinityHotCopyDS: {}
    # nodeSelectorNoHotCopyDS: {}
    # nodeSelectorHotCopyDS: {}
    # tolerationsDS: []

  te:
    # Number of transaction engines (TE) nodes.  Limit is 3 in CE version of NuoDB 
    replicas: 1
    memoryOption: 8g
    resources:
      limits:
        cpu: 4
        memory: 16Gi
      requests:
        cpu: 2
        memory: 8Gi
    affinity: {}
    # nodeSelector: {}
    # tolerations: []

    # labels
    # Additional Labels given to the TEs started
    labels: {}

    engineOptions: {}

    # named key/value pairs that need to be passed to the image, such as
    # keystore: "/etc/nuodb/keys/nuoadmin.p12"
    otherOptions: {}
  
  enableDaemonSet: false
  # Set to true if you are using manually created volumes or restoring
  # from a previously existing backup.
  isManualVolumeProvisioning: false
  isRestore: false

openshift:
  # change this to true if you want to deploy using OpenShift proprietary features
  enabled: false
  # generally avoid deployment configs, favor deployments, so leave this as false
  enableDeploymentConfigs: false
  # if openshift is enabled, then also permit routes by default
  enableRoutes: true
