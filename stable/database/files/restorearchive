#!/bin/bash

. ${NUODB_HOME}/etc/restore_lib.sh

LOGFILE=${NUODB_LOGDIR:=/var/log/nuodb}/restorearchive.log

export DB_NAME NUODB_STORAGE_PASSWORDS_DIR

wotIdid=
error=
restore_source=

#=============================
# main routine
#=============================

log "==========================================="
wrapLogfile

checkAdminLayer 30

if isRestoreRequestSupported; then
  # Execute archive restore only if NuoDB image is new enough.

  archive_id=$(getArchiveId "${DB_DIR}")
  atom_count=$( ls -l "$DB_DIR/*.atm" 2>/dev/null | wc -l )
  catalog_count=$( ls -l "$DB_DIR/*.cat" 2>/dev/null | wc -l )

  log "path=$DB_DIR; archiveId=${archive_id}; atoms=${atom_count}; catalogs=${catalog_count}"

  if [ -n "$archive_id" ]; then
    trace "reading restore request for archiveId=${archive_id}"
    restore_requested=$(nuodocker get restore-requests --db-name "$DB_NAME" --archive-ids "$archive_id")
    restore_type="$(echo "$restore_requested" | awk '{print $2}')"
    user_data="$(echo "$restore_requested" | awk '{print $3}')"

    if [ -n "$restore_requested" ] && [ "$restore_type" == "automatic" ]; then
      # Automatic restore for this archive has been requested
      trace "evaluating restore request data"
      eval "$user_data"
      if [ -z "$restore_source_encoded" ]; then
        # restore_source_encoded variable should be passed in the user_data by
        # `nuorestore` script
        die 1 "restore source is missing from ${restore_type} restore request"
      fi

      restore_source="$(printf "%s" "${restore_source_encoded}" | base64 -d)"
      resolveLatestSource || die 1 "unable to resolve ${restore_source} restore source"
      # restore chart doesn't have notion of stream|backupset
      # `nuodocker restore archive` works with both
      restore_type="backupset"
      [ -z "$restore_credentials_encoded" ] && restore_credentials_encoded="$(printf "%s" "${DATABASE_RESTORE_CREDENTIALS:-:}" | base64)"
      [ -z "$strip_levels" ] && strip_levels=${DATABASE_RESTORE_STRIP_LEVELS:-1}
      
      log "Archive with archiveId=${archive_id} has been requested for a restore source=${restore_source}, type=${restore_type}, strip=${strip_levels}"
      trace "performing restore for archiveId=${archive_id}"
      if isRestoreSourceAvailable "$restore_source"; then
        perform_restore  "$restore_source" "$restore_credentials_encoded" "$restore_type" "$strip_levels" || die $? "$error"
        completeRestoreRequest "$archive_id"
      else
        error="Backupset $restore_source cannot be found in $NUODB_BACKUPDIR"
        die 1 "$error"
      fi
    fi
  elif [ "$atom_count" -lt 20 ] && [ "$catalog_count" -lt 2 ]; then
    archive_id=$( nuocmd show archives \
      --db-name "$DB_NAME" \
      --archive-format "archive-id: {id}" | \
        sed -En "/^archive-id: / {N; /$HOSTNAME/ s/^archive-id: ([0-9]+).*$/\1/; T; p}" | head -n 1 )
    if [ -z "$archive_id" ]; then
      archive_id=$( nuocmd show archives \
        --db-name $DB_NAME \
        --removed --removed-archive-format "archive-id: {id}" | \
          sed -En "/^archive-id: / {N; /$HOSTNAME/ s/^archive-id: ([0-9]+).*$/\1/; T; p}" | head -n 1 )
    fi
    
    # if there is an archive in domain state previously served by this SM and
    # autoRestore is configured, try to REPAIR/RESTORE the disk archive
    if [ -n "$archive_id" ] && [ -n "$NUODB_AUTO_RESTORE" ]; then
      restore_source="$NUODB_AUTO_RESTORE"
      resolveLatestSource || log "unable to resolve ${restore_source} restore source"
      restore_credentials_encoded="$(printf "%s" "${DATABASE_RESTORE_CREDENTIALS:-:}" | base64)"
      restore_type="${NUODB_AUTO_RESTORE_TYPE}"
      strip_levels="${NUODB_RESTORE_STRIP_LEVELS:-1}"

      log "Automatic archive repair will be performed for archiveId=${archive_id}, source=${restore_source}"
      trace "restoring damaged archive"
      if isRestoreSourceAvailable "$restore_source"; then
        perform_restore  "$restore_source" "$restore_credentials_encoded" "$restore_type" "$strip_levels" || die $? "$error"
      fi
      # delete damaged archive metadata as a new one will be created by
      # nuodocker start sm
      purgeOldArchive "$archive_id"
    fi
  fi
else
  # Keep the legacy way to perform in-place restore if the NuoDB version is not
  # new enough

  : ${NUODB_SEQUENCE_SYNC:=true}

  startup_key="/nuodb/nuosm/startup"
  first_req="$NUODB_RESTORE_REQUEST_PREFIX/$DB_NAME/first"
  restore_req="$NUODB_RESTORE_REQUEST_PREFIX/$DB_NAME/restore"
  credential_req="$NUODB_RESTORE_REQUEST_PREFIX/$DB_NAME/restore/credentials"
  strip_req="$NUODB_RESTORE_REQUEST_PREFIX/$DB_NAME/restore/strip-levels"

  trace "retrieving restore request from raft"
  restore_requested="$( nuocmd get value --key $restore_req )"

  trace "checking archive raft metadata"
  myArchive=$( nuocmd show archives --db-name $DB_NAME --archive-format "archive-id: {id}" | sed -En "/^archive-id: / {N; /$HOSTNAME/ s/^archive-id: ([0-9]+).*$/\1/; T; p}" | head -n 1 )
  [ -z "$myArchive" ] && myArchive=$( nuocmd show archives \
    --db-name $DB_NAME \
    --removed --removed-archive-format "archive-id: {id}" | sed -En "/^archive-id: / {N; /$HOSTNAME/ s/^archive-id: ([0-9]+).*$/\1/; T; p}" | head -n 1 )
  [ -z "$myArchive" ] && myArchive="-1"
  log "archiveId=$myArchive; DB=$DB_NAME; hostname=$HOSTNAME"
  [ -n "$NUODB_DEBUG" -a "$myArchive" -eq "-1" ] && log "$(nuocmd show archives --db-name $DB_NAME)"

  wotIdid=""

  if [ -n "$restore_requested" ]; then
    trace "retrieving restore credentials from raft"
    restore_credentials="$( nuocmd get value --key $credential_req )"
    [ -z "$restore_credentials" ] && restore_credentials=${DATABASE_RESTORE_CREDENTIALS:-:}

    strip_levels="$( nuocmd get value --key $strip_req )"
    [ -z "$strip_levels" ] && strip_levels=${DATABASE_RESTORE_STRIP_LEVELS:-1}
  fi

  # if my archive already exists
  if [ "$myArchive" -ne "-1" ]; then

    # if a restore has been requested, then do that
    if [ -n "$restore_requested" ]; then
      restore_source=$(echo $restore_requested | sed -r 's;^stream:(.+)$;\1;')
      [ "$restore_source" != "$restore_requested" ] && restore_type="stream"

    # else if the database is configured with an AUTO_RESTORE, then specify that
    elif [ -n "$NUODB_AUTO_RESTORE" ]; then
      restore_source="$NUODB_AUTO_RESTORE"
      restore_credentials=${DATABASE_RESTORE_CREDENTIALS:-:}
      restore_type=${NUODB_AUTO_RESTORE_TYPE}
      strip_levels=${NUODB_RESTORE_STRIP_LEVELS:-1}
    fi

  # my archive on disk does not exist - check to see if we should RESTORE/IMPORT it
  elif [ ! -f $DB_DIR/1.atm ]; then

    lostArchive=$(nuocmd show archives --db-name $DB_NAME --archive-format "archive-id: {id}" | sed -En "/^archive-id: / {N; /UNKNOWN ADDRESS/ s/^archive-id: ([0-9]+).*$/\1/; T; p}" | head -n 1 )
    
    # if there is a lost archive, try to REPAIR/RESTORE the disk archive
    if [ -n "$lostArchive" ]; then

      # delete this lost archive to enable SM restart
      myArchive="$lostArchive"

      # if autoRestore is enabled - then configure that also
      if [ -n "$NUODB_AUTO_RESTORE" ]; then
        restore_source="$NUODB_AUTO_RESTORE"
        restore_credentials=${DATABASE_RESTORE_CREDENTIALS:-:}
        restore_type=${NUODB_AUTO_RESTORE_TYPE}
        strip_levels=${NUODB_RESTORE_STRIP_LEVELS:-1}
      fi
    fi
  elif [ -n "$NUODB_DEBUG" ]; then
    log "myArchive not found, but archive has some contents: $( ls -l $DB_DIR )"
  fi

  # resolve ":latest"
  if [ "$restore_source" = ":latest" ]; then

    # find which backup group performed the latest backup
    trace "retrieve :latest from nuobackup"
    latest_group=$( nuobackup --type report-latest --db-name $DB_NAME )

    # if the latest backup was not by my group, then wait to allow an SM from the latest group to start first
    if [ "$latest_group" != "$NUODB_BACKUP_GROUP" ]; then
      log ":latest backup was not made by my group $NUODB_BACKUP_GROUP - waiting to allow an SM from $latest_group to start..."

      # try for 30 seconds, sleeping every 2 seconds
      for retry in {1..30..2}; do
        sm="$(nuocmd get value --key $first_req )"
        [ -n "$sm" ] && break
        sleep 2
      done

      [ -n "$sm" ] && log "Primary restore SM='${sm}'..." || log "No Primary restore SM found - attempting restore from $NUODB_BACKUP_GROUP..."
    fi
  fi

  # resolve the latest backup for the specified backup group
  if [ "$restore_source" = ":latest" -o "$restore_source" = ":group-latest" ]; then

    trace "retrieving :group-latest from nuorestore"

    log "Resolving restore '$restore_source'..."
    restore_source=$( nuobackup --type report-latest --db-name $DB_NAME --group $NUODB_BACKUP_GROUP )
    log "Latest restore for $NUODB_BACKUP_GROUP resolved to $restore_source"
  fi

  restore_credentials_encoded="$(printf "%s" "${restore_credentials}" | base64)"

  log "restore_source=$restore_source; restore_requested=$restore_requested; path=$DB_DIR; atoms=${atom_count}; catalogs=${catalog_count}"

  wotIdid=""

  if [ -n "$restore_requested" -a -n "$restore_source" ]; then
    # work out who is the first one in
    trace "trying to reserve first-in"
    nuocmd set value --key $first_req --value $HOSTNAME --expected-value ''
    first_in="$( nuocmd get value --key $first_req )"

    wotIdid=""

    log "First-in = $first_in"

    # if I got in first - perform the restore
    if [ "$first_in" = "$HOSTNAME" ]; then

      log "I am first-in: $first_in == $HOSTNAME"

      # take ownership of the SM startup semaphore
      trace "Take ownership of SM startup semaphore"
      nuocmd set value --key $startup_key/$DB_NAME --value $HOSTNAME --unconditional

      wotIdid=""
      if ! isRestoreSourceAvailable "$restore_source"; then
        error="Backupset $restore_source cannot be found in $NUODB_BACKUPDIR"
        die 1 $error
      fi

      # KAA will remove archives for scaled down SM statefulsets; 
      # resurrect my archive if needed
      resurrectRemovedArchive

      # disable all the archive metadata so that get-archive-history will not look for other SMs
      trace "Disable all archive metadata except my own"
      archive_ids=$( nuocmd get archives --db-name $DB_NAME | grep -o "id=[0-9]\+" | grep -o "[0-9]\+")

      # delete all archives but my own
      for archv in $archive_ids; do
        [ "$archv" -ne "$myArchive" ] && log "Deleting archiveId=$archv" && log $(nuocmd delete archive --archive-id $archv 2>&1)
      done

      # and restore the data
      trace "performing restore"
      perform_restore "$restore_source" "$restore_credentials_encoded" "$restore_type" "$strip_levels" || die $? "$error"
      purgeOldArchive "$myArchive"

      wotIdid=""

      log "Restored from $restore_source"

      # clear/release shared state only if restore is successfull
      log "Clearing restore credential request from raft"
      nuocmd set value --key $credential_req --value '' --unconditional
    fi

    # wait until it's my turn to startup
    trace "waiting until it's my turn to start up"
    retry=0
    until owner=$( nuocmd get value --key $startup_key/$DB_NAME ); [ "$owner" = "$HOSTNAME" -o "$NUODB_SEQUENCE_SYNC" = "false" ] ; do

      [ "$owner" = "" -a $retry -gt 0 ] && die 1 "Fatal error in database RESTORE - initial SM has exited with error - $HOSTNAME aborting also"

      # find the start-id of the SM that owns the semaphore
      owner_id=$( nuocmd show database --db-name $DB_NAME --skip-exited --process-format "{engine_type}: {address} start-id: {start_id};" | grep -E "^ *SM: $owner" | grep -Eo "start-id: [[0-9]+" | grep -Eo "[0-9]+")
      if [ -z "$owner_id" ]; then
        log "Could not find start-id for starting SM on $owner - retrying..."
        sleep 30

        retry=$((retry + 1))
        continue
      fi

      # wait for the starting SM to be RUNNING
      nuocmd check process --start-id $owner_id --check-running --timeout 600
      if [ $? != 0 ]; then
        log "Timeout waiting for SM to go RUNNING - owner $owner, start-id $owner_id - retrying."
        sleep 30
        continue
      fi

      # transfer ownership of the startup semaphore to myself
      nuocmd set value --key $startup_key/$DB_NAME --value $HOSTNAME --expected-value $owner
    done

    # Perform seed restore after the first-in SM started so that newly created archive is
    # not deleted by the first-in
    if [ "$first_in" != "$HOSTNAME" ]; then
      # attempt to restore the same backup that the initial SM is restoring - to reduce SYNC time
      trace "attempting to restore same backup as master SM to secondary SM"

      if isRestoreSourceAvailable "$restore_source"; then
        # any error in a SEED restore is a fatal error
        perform_restore "$restore_source" "$restore_credentials_encoded" "$restore_type" "$strip_levels" || die $? "$error"
        purgeOldArchive "$myArchive"
        log "Restored secondary archive to match primary restore"
      fi
    fi

  fi

  wotIdid=""

  # resurrect my archive if it is removed
  # this will likely never execute but is kept to be sure
  resurrectRemovedArchive

  # if a RESTORE_SOURCE is defined, and the archive dir is empty, then import/restore from the URL
  if [ -n "$restore_source" -a -z "$restore_requested" -a $atom_count -lt 20 -a $catalog_count -lt 2 ]; then
    if isRestoreSourceAvailable "$restore_source"; then
      trace "restoring empty/damaged archive"
      log "Existing archive is empty or damaged - restoring and clearing metadata"
      # any error in a IMPORT restore is a fatal error
      perform_restore  "$restore_source" "$restore_credentials_encoded" "$restore_type" "$strip_levels" || die $? "$error"
    fi
    # delete damaged archive metadata as new one will be created by nuodocker
    purgeOldArchive "$myArchive"
  fi
fi

log "$( nuocmd show archives --db-name "$DB_NAME" )"
