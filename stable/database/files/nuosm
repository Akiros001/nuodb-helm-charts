#!/bin/bash

. ${NUODB_HOME}/etc/restore_lib.sh

first_req="$NUODB_RESTORE_REQUEST_PREFIX/$DB_NAME/first"
restore_req="$NUODB_RESTORE_REQUEST_PREFIX/$DB_NAME/restore"

LOGFILE=${NUODB_LOGDIR:=/var/log/nuodb}/nuosm.log

# attempt to retain the previous crash directory (within the configured window to avoid filling the disk)
crashcount=$(find $NUODB_CRASHDIR/core* -maxdepth 0 ! -type d 2>/dev/null | wc -l)
if [ $crashcount -ge 1 ]; then
  retainedcrashcount=$(find $NUODB_LOGDIR/crash-* -maxdepth 0 -type d -cmin -$OVERWRITE_WINDOW 2>/dev/null | wc -l)
  if [ $retainedcrashcount -lt $OVERWRITE_COPIES ]; then
    crashbackupdir="$NUODB_LOGDIR/crash-$( date +%Y%m%dT%H%M%S )/"
    mkdir $crashbackupdir
    mv $NUODB_CRASHDIR/core* $crashbackupdir
  fi
fi

export DB_NAME

#=======================================
# function - clear database restore request
#
# Waits for the database to go into RUNNING state after first-in process has
# been started and cleares the restore request along with first-in key.
#
function clearRestoreRequest() {
    local expected_state="$1"
    nuocmd check database --db-name $DB_NAME --check-running --wait-forever
    log "clearing restore request"
    nuocmd set value --key $restore_req --value '' --expected-value "$expected_state"
    trace "releasing first-in"
    nuocmd set value --key $first_req --value '' --expected-value $HOSTNAME
}

#=============================
# main routine
#=============================

log "==========================================="

wrapLogfile

# ensure DB_DIR exists
if [ ! -e "${DB_DIR}" ] ; then
  mkdir -p "${DB_DIR}"
  log "Created new dir $DB_DIR"
else
  log "Directory $DB_DIR exists"
fi

# ensure the admin layer is intact...
checkAdminLayer 30

if ! isRestoreRequestSupported; then
  # Keep the legacy way for clearing restore request if NuoDB image is not new
  # enough
  trace "retrieving restore request from raft"
  restore_requested="$( nuocmd get value --key "$restore_req" )"
  trace "retrieving first-in value from raft"
  first_in="$( nuocmd get value --key "$first_req" )"

  if [ -n "$restore_requested" ] && [ "$first_in" = "$HOSTNAME" ]; then 
      # clear the restore_request only if restore is successfull
      clearRestoreRequest "$restore_requested" &
  fi
fi

trace "executing nuodocker to start SM"

nuodocker_flags=()
[ -n "$NUODB_DEBUG" ] && nuodocker_flags+=("--debug")

# expects NUOCMD_API_SERVER to be set.
if [ -n "${NUODB_OPTIONS}" ] ; then
    exec nuodocker "${nuodocker_flags[@]}" start sm --archive-dir "${DB_DIR}" --dba-user "${DB_USER}" --dba-password "${DB_PASSWORD}" --db-name "${DB_NAME}" --options "${NUODB_OPTIONS}" "$@"
else
    exec nuodocker "${nuodocker_flags[@]}" start sm --archive-dir "${DB_DIR}" --dba-user "${DB_USER}" --dba-password "${DB_PASSWORD}" --db-name "${DB_NAME}" "$@"
fi
