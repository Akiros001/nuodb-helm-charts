#!/bin/sh
#
# simple script to perform a NuoDB restore.
# Sets a flag to tell newly-starting SM(s) to perform the restore; then optionally causes the SM(s) to restart

# args are:
#   --type      - retore type: ( database | archive )
#   --db-name   - database name to perform the restore operation on
#   --semaphore - a key in the raftlog KV store to set to trigger a full backup after the restore
#   --source    - source to restore from - can be a backupset or a URL
#   --auto      - automatically start the restore operation ( true | false )

: ${NUODB_BACKUP_KEY:=/nuodb/nuobackup}
: ${NUODB_RESTORE_REQUEST_PREFIX:=/nuodb/nuosm}

ERR_ADMIN_UNAVAILABLE=71
ERR_BACKUPSET_NOT_FOUND=72
ERR_NO_SPACE=73
ERR_INCORRECT_BACKUP=74
ERR_RESTORE_FAILED=75

#==========
# get a value in the KV store
#==========
function getKV() {
   # up to 10 retries
   for retry in {1..3}; do
      kvVal=$(nuocmd --api-server $NUOCMD_API_SERVER get value --key $1)
      [ $? == 0 ] && return $kvVal
      sleep 2
   done

   echo "Admin KV GET command failed after 3 retries - Admin has no LEADER?"
   exit $ERR_ADMIN_UNAVAILABLE
}

#==========
# set a value in the KV store
#==========
function setKV() {
   # up to 10 retries
   [ "$3" = "--unconditional" ] &&  cond="--unconditional" || cond="--expected-value $3"
   for retry in {1..3}; do
      nuocmd --api-server $NUOCMD_API_SERVER set value --key $1 --value $2 $cond
      [ $? == 0 ] && return $2
      sleep 2
   done

   echo "Admin KV SET command failed after 3 retries - Admin has no LEADER?"
   exit $ERR_ADMIN_UNAVAILABLE
}

#==========
# Main routine
#==========
restore_type="database"
db_name=$DB_NAME
semaphore="/nuobackup/semaphore"
restore_source=":latest"
auto="false"

restore_credentials=$NUODB_RESTORE_CREDENTIALS
[ -z "$restore_credentials" ] && restore_credentials=${DATABASE_RESTORE_CREDENTIALS:=:}

while [ $# -gt 0 ];
do
    opt="$1";
    shift;
    case "$opt" in
        "--" ) break 2;;
        "--type" )
           restore_type="$1"; shift;;
        "--type="* )
           restore_type="${opt#*=}";;
        "--db-name" )
           db_name="$1"; shift;;
        "--db-name="* )
           db_name="${opt#*=}";;
        "--semaphore" )
           semaphore="$1"; shift;;
        "--semaphore="* )
           semaphore="${opt#*=}";;
        "--source" )
           restore_source="$1"; shift;;
        "--source="* )
           restore_source="${opt#*=}";;
        "--auto" )
           auto="$1"; shift;;
        "--auto="* )
           auto="${opt#*=}";;
        *) echo >&2 "Invalid nuorestore option: $opt ($@)"; exit 1;;
   esac
done

restore_type=$(echo $restore_type | tr '[:upper:]' '[:lower:]')
auto=$(echo $auto | tr '[:upper:]' '[:lower:]')

# set the persistent flags for the backup
setKV $NUODB_RESTORE_REQUEST_PREFIX/$db_name/restore $restore_source --unconditional
if [ -n "$restore_credentials" ]; then
    setKV $NUODB_RESTORE_REQUEST_PREFIX/$db_name/restore/credentials $restore_credentials --unconditional
fi

if [ "$restore_type" = "database" ]; then

   # Set the semaphores to create a new backupset from a full backup
   setKV $semaphore/$db_name --value "full" --unconditional

   for group in $(getKV $NUODB_BACKUP_KEY/$db_name/backup-groups); do
      setKV $semaphore/$db_name/$group --value "full" --unconditional
   done

   # optionally do automatic initiation of the restore
   [ "$auto" = "true" ] && nuocmd --api-server $NUOCMD_API_SERVER shutdown database --db-name $db_name
fi

echo "Restore job completed"